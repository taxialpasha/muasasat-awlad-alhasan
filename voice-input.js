/**
 * ูุธุงู ุงูุฅุฏุฎุงู ุงูุตูุชู ุงููุชูุงูู
 * ููู ูููุตู ูุฅุถุงูุฉ ุฅุฏุฎุงู ุงูุจูุงูุงุช ุจุงูุตูุช ูุฌููุน ุญููู ุงููุธุงู
 * ูุณุชุฎุฏู Web Speech API ูุน ุฏุนู ูุงูู ููุบุฉ ุงูุนุฑุจูุฉ
 * 
 * ุงูุงุณุชุฎุฏุงู: ูู ุจุชุถููู ูุฐุง ุงูููู ูู HTML ุงูุฎุงุต ุจู
 * <script src="voice-input.js"></script>
 */

// ==============================
// ุฅุนุฏุงุฏุงุช ุงููุธุงู ุงูุตูุชู ุงูุงูุชุฑุงุถูุฉ
// ==============================
const DEFAULT_VOICE_SETTINGS = {
    // ุฅุนุฏุงุฏุงุช ุงูุชุนุฑู ุนูู ุงูุตูุช
    language: 'ar-SA', // ุงููุบุฉ ุงูุงูุชุฑุงุถูุฉ (ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ)
    continuous: false, // ุงูุชุณุฌูู ุงููุณุชูุฑ
    interimResults: true, // ุงููุชุงุฆุฌ ุงููุคูุชุฉ
    maxAlternatives: 3, // ุนุฏุฏ ุงูุจุฏุงุฆู
    
    // ุฅุนุฏุงุฏุงุช ุงููุงุฌูุฉ
    showMicButton: true, // ุฅุธูุงุฑ ุฃุฒุฑุงุฑ ุงููุงููุฑูููู
    buttonSize: 'normal', // ุญุฌู ุงูุฃุฒุฑุงุฑ (small, normal, large)
    buttonPosition: 'right', // ูููุน ุงูุฃุฒุฑุงุฑ (left, right)
    showPanel: true, // ุฅุธูุงุฑ ููุญุฉ ุงูุชุญูู
    
    // ุฅุนุฏุงุฏุงุช ุงูุตูุช
    volume: 0.8, // ูุณุชูู ุงูุตูุช ููุชูุจููุงุช
    enableSounds: true, // ุชูุนูู ุงูุฃุตูุงุช
    enableVibration: true, // ุชูุนูู ุงูุงูุชุฒุงุฒ (ููููุงุชู)
    
    // ุฅุนุฏุงุฏุงุช ุงูุชุญููู
    autoCapitalize: true, // ูุชุงุจุฉ ุฃูู ุญุฑู ูุจูุฑ ุชููุงุฆูุงู
    autoCorrect: true, // ุชุตุญูุญ ุชููุงุฆู
    enablePunctuation: true, // ุนูุงูุงุช ุงูุชุฑููู ุงูุชููุงุฆูุฉ
    
    // ุฅุนุฏุงุฏุงุช ุงูุฃูุงู
    confirmBeforeInput: false, // ุชุฃููุฏ ูุจู ุงูุฅุฏุฎุงู
    timeoutDuration: 10000, // ูููุฉ ุงูุชุณุฌูู ุจุงููููู ุซุงููุฉ
    
    // ุงููุบุงุช ุงููุฏุนููุฉ
    supportedLanguages: [
        { code: 'ar-SA', name: 'ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ', flag: '๐ธ๐ฆ' },
        { code: 'ar-EG', name: 'ุงูุนุฑุจูุฉ ุงููุตุฑูุฉ', flag: '๐ช๐ฌ' },
        { code: 'ar-AE', name: 'ุงูุนุฑุจูุฉ ุงูุฅูุงุฑุงุชูุฉ', flag: '๐ฆ๐ช' },
        { code: 'en-US', name: 'English (US)', flag: '๐บ๐ธ' },
        { code: 'en-GB', name: 'English (UK)', flag: '๐ฌ๐ง' }
    ]
};

// ==============================
// ูุชุบูุฑุงุช ุงููุธุงู
// ==============================
let currentVoiceSettings = { ...DEFAULT_VOICE_SETTINGS };
let recognition = null;
let isListening = false;
let currentTargetInput = null;
let voiceControlPanel = null;
let micButtons = new Map();

// ุฃุตูุงุช ุงูุชูุจููุงุช
const VOICE_SOUNDS = {
    start: 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAIAE...', // ุจูุงูุงุช ุตูุชูุฉ ูุถุบูุทุฉ
    success: 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAIAE...',
    error: 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAIAE...',
    end: 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAIAE...'
};

// ==============================
// ุชููุฆุฉ ุงููุธุงู ุงูุตูุชู
// ==============================
function initializeVoiceSystem() {
    try {
        // ุงูุชุญูู ูู ุฏุนู ุงููุชุตูุญ
        if (!checkBrowserSupport()) {
            console.warn('โ ุงููุชุตูุญ ูุง ูุฏุนู ุงูุชุนุฑู ุนูู ุงูุตูุช');
            return;
        }
        
        // ุชุญููู ุงูุฅุนุฏุงุฏุงุช ุงููุญููุธุฉ
        loadVoiceSettings();
        
        // ุชููุฆุฉ ูุญุฑู ุงูุชุนุฑู ุนูู ุงูุตูุช
        initializeSpeechRecognition();
        
        // ุฅุถุงูุฉ ุฃุฒุฑุงุฑ ุงููุงููุฑูููู
        addMicrophoneButtons();
        
        // ุฅูุดุงุก ููุญุฉ ุงูุชุญูู
        createVoiceControlPanel();
        
        // ุฅุนุฏุงุฏ ุงููุณุชูุนูู
        setupVoiceEventListeners();
        
        console.log('๐ค ุชู ุชููุฆุฉ ูุธุงู ุงูุฅุฏุฎุงู ุงูุตูุชู ุจูุฌุงุญ');
        
        // ุฅุดุนุงุฑ ุงููุณุชุฎุฏู
        showVoiceToast('๐ค ูุธุงู ุงูุฅุฏุฎุงู ุงูุตูุชู ุฌุงูุฒ ููุงุณุชุฎุฏุงู', 'success');
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุชููุฆุฉ ุงููุธุงู ุงูุตูุชู:', error);
        showVoiceToast('ูุดู ูู ุชููุฆุฉ ุงููุธุงู ุงูุตูุชู', 'error');
    }
}

// ==============================
// ุงูุชุญูู ูู ุฏุนู ุงููุชุตูุญ
// ==============================
function checkBrowserSupport() {
    // ุงูุชุญูู ูู Web Speech API
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        showVoiceToast('ุงููุชุตูุญ ูุง ูุฏุนู ุงูุชุนุฑู ุนูู ุงูุตูุช', 'error');
        return false;
    }
    
    // ุงูุชุญูู ูู ุฅููุงููุฉ ุงููุตูู ูููุงููุฑูููู
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        showVoiceToast('ุงููุชุตูุญ ูุง ูุฏุนู ุงููุตูู ูููุงููุฑูููู', 'error');
        return false;
    }
    
    return true;
}

// ==============================
// ุชููุฆุฉ ูุญุฑู ุงูุชุนุฑู ุนูู ุงูุตูุช
// ==============================
function initializeSpeechRecognition() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    
    if (!SpeechRecognition) {
        throw new Error('Speech Recognition API ุบูุฑ ูุฏุนูู');
    }
    
    recognition = new SpeechRecognition();
    
    // ุฅุนุฏุงุฏ ุงููุญุฑู
    recognition.lang = currentVoiceSettings.language;
    recognition.continuous = currentVoiceSettings.continuous;
    recognition.interimResults = currentVoiceSettings.interimResults;
    recognition.maxAlternatives = currentVoiceSettings.maxAlternatives;
    
    // ุฃุญุฏุงุซ ุงูุชุนุฑู ุนูู ุงูุตูุช
    recognition.onstart = function() {
        isListening = true;
        updateMicButtonState(currentTargetInput, 'listening');
        playVoiceSound('start');
        showVoiceToast('๐ค ุฌุงุฑู ุงูุงุณุชูุงุน...', 'info');
        
        if (currentVoiceSettings.enableVibration && navigator.vibrate) {
            navigator.vibrate(100);
        }
    };
    
    recognition.onresult = function(event) {
        let interimTranscript = '';
        let finalTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            
            if (event.results[i].isFinal) {
                finalTranscript += transcript;
            } else {
                interimTranscript += transcript;
            }
        }
        
        // ุฅุธูุงุฑ ุงููุชุงุฆุฌ ุงููุคูุชุฉ
        if (interimTranscript && currentTargetInput) {
            showInterimResult(interimTranscript);
        }
        
        // ูุนุงูุฌุฉ ุงููุชุงุฆุฌ ุงูููุงุฆูุฉ
        if (finalTranscript && currentTargetInput) {
            processVoiceInput(finalTranscript);
        }
    };
    
    recognition.onerror = function(event) {
        isListening = false;
        updateMicButtonState(currentTargetInput, 'idle');
        
        let errorMessage = 'ุญุฏุซ ุฎุทุฃ ูู ุงูุชุนุฑู ุนูู ุงูุตูุช';
        
        switch(event.error) {
            case 'no-speech':
                errorMessage = 'ูู ูุชู ุณูุงุน ุฃู ุตูุช';
                break;
            case 'audio-capture':
                errorMessage = 'ูุง ูููู ุงููุตูู ูููุงููุฑูููู';
                break;
            case 'not-allowed':
                errorMessage = 'ุชู ุฑูุถ ุงูุฅุฐู ูููุตูู ูููุงููุฑูููู';
                break;
            case 'network':
                errorMessage = 'ุฎุทุฃ ูู ุงูุดุจูุฉ';
                break;
            case 'language-not-supported':
                errorMessage = 'ุงููุบุฉ ุงููุญุฏุฏุฉ ุบูุฑ ูุฏุนููุฉ';
                break;
        }
        
        showVoiceToast(errorMessage, 'error');
        playVoiceSound('error');
    };
    
    recognition.onend = function() {
        isListening = false;
        updateMicButtonState(currentTargetInput, 'idle');
        hideInterimResult();
        playVoiceSound('end');
    };
}

// ==============================
// ุฅุถุงูุฉ ุฃุฒุฑุงุฑ ุงููุงููุฑูููู
// ==============================
function addMicrophoneButtons() {
    // ุงูุจุญุซ ุนู ุฌููุน ุญููู ุงูุฅุฏุฎุงู
    const inputFields = document.querySelectorAll('input[type="text"], input[type="number"], input[type="tel"], input[type="email"], textarea, select');
    
    inputFields.forEach(addMicButtonToField);
    
    // ูุฑุงูุจุฉ ุฅุถุงูุฉ ุญููู ุฌุฏูุฏุฉ
    observeNewInputFields();
}

function addMicButtonToField(inputField) {
    // ุชุฌุงูู ุงูุญููู ุงููุฎููุฉ ุฃู ุงูุบูุฑ ูุงุจูุฉ ููุชุนุฏูู  
    if (inputField.type === 'hidden' || inputField.readOnly || inputField.disabled) {
        return;
    }
    
    // ุชุฌุงูู ุงูุญููู ุงูุชู ุชุญุชูู ุนูู ูุงููุฑูููู ุจุงููุนู
    if (micButtons.has(inputField)) {
        return;
    }
    
    // ุฅูุดุงุก ุฒุฑ ุงููุงููุฑูููู
    const micButton = createMicButton(inputField);
    
    // ุฅุถุงูุฉ ุงูุฒุฑ ููุญูู
    insertMicButton(inputField, micButton);
    
    // ุญูุธ ุงููุฑุฌุน
    micButtons.set(inputField, micButton);
}

function createMicButton(inputField) {
    const button = document.createElement('button');
    button.type = 'button';
    button.className = 'voice-mic-button';
    button.title = 'ุฅุฏุฎุงู ุจุงูุตูุช';
    button.setAttribute('data-target', inputField.id || generateFieldId(inputField));
    
    // ุชุญุฏูุฏ ุญุฌู ุงูุฒุฑ
    const sizeClass = `mic-${currentVoiceSettings.buttonSize}`;
    button.classList.add(sizeClass);
    
    // ุฃููููุฉ ุงููุงููุฑูููู
    button.innerHTML = `
        <svg viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 2C10.34 2 9 3.34 9 5V11C9 12.66 10.34 14 12 14C13.66 14 15 12.66 15 11V5C15 3.34 13.66 2 12 2ZM19 11C19 15.42 15.42 19 11 19V21H13V23H11C10.45 23 10 22.55 10 22S10.45 21 11 21V19C6.58 19 3 15.42 3 11H5C5 13.76 7.24 16 10 16H14C16.76 16 19 13.76 19 11H19ZM17 11C17 13.21 15.21 15 13 15H11C8.79 15 7 13.21 7 11V5C7 2.79 8.79 1 11 1H13C15.21 1 17 2.79 17 5V11Z"/>
        </svg>
        <span class="mic-status"></span>
    `;
    
    // ุฃุญุฏุงุซ ุงูุฒุฑ
    button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        handleMicButtonClick(inputField, button);
    });
    
    return button;
}

function insertMicButton(inputField, micButton) {
    const container = inputField.parentNode;
    
    // ุฅูุดุงุก ุญุงููุฉ ููุญูู ูุงูุฒุฑ ุฅุฐุง ูู ุชูู ููุฌูุฏุฉ
    if (!container.classList.contains('voice-input-container')) {
        const wrapper = document.createElement('div');
        wrapper.className = 'voice-input-container';
        
        // ูุณุฎ ุงูุญูู ุฅูู ุงูุญุงููุฉ ุงูุฌุฏูุฏุฉ
        container.insertBefore(wrapper, inputField);
        wrapper.appendChild(inputField);
        wrapper.appendChild(micButton);
    } else {
        container.appendChild(micButton);
    }
}

function generateFieldId(field) {
    return 'voice_field_' + Math.random().toString(36).substr(2, 9);
}

// ==============================
// ูุนุงูุฌุฉ ุงูููุฑ ุนูู ุฒุฑ ุงููุงููุฑูููู
// ==============================
function handleMicButtonClick(inputField, micButton) {
    if (isListening) {
        stopListening();
        return;
    }
    
    // ุงูุชุญูู ูู ุงูุฃุฐููุงุช
    requestMicrophonePermission()
        .then(() => {
            startListening(inputField, micButton);
        })
        .catch((error) => {
            console.error('ุฎุทุฃ ูู ุฃุฐููุงุช ุงููุงููุฑูููู:', error);
            showVoiceToast('ูุฑุฌู ุงูุณูุงุญ ุจุงููุตูู ูููุงููุฑูููู', 'error');
        });
}

function requestMicrophonePermission() {
    return navigator.mediaDevices.getUserMedia({ audio: true })
        .then(stream => {
            // ุฅููุงู ุงูุชุฏูู ุจุนุฏ ุงูุชุญูู ูู ุงูุฃุฐููุงุช
            stream.getTracks().forEach(track => track.stop());
            return true;
        });
}

function startListening(inputField, micButton) {
    try {
        currentTargetInput = inputField;
        
        // ุชุญุฏูุซ ุฅุนุฏุงุฏุงุช ุงููุญุฑู
        recognition.lang = currentVoiceSettings.language;
        
        // ุจุฏุก ุงูุชุณุฌูู
        recognition.start();
        
        // ุชุนููู ูููุฉ ุฒูููุฉ
        setTimeout(() => {
            if (isListening) {
                stopListening();
                showVoiceToast('ุงูุชูุช ูููุฉ ุงูุชุณุฌูู', 'warning');
            }
        }, currentVoiceSettings.timeoutDuration);
        
    } catch (error) {
        console.error('ุฎุทุฃ ูู ุจุฏุก ุงูุชุณุฌูู:', error);
        showVoiceToast('ูุดู ูู ุจุฏุก ุงูุชุณุฌูู', 'error');
        updateMicButtonState(inputField, 'idle');
    }
}

function stopListening() {
    if (recognition && isListening) {
        recognition.stop();
    }
}

// ==============================
// ูุนุงูุฌุฉ ุงูุฅุฏุฎุงู ุงูุตูุชู
// ==============================
function processVoiceInput(transcript) {
    if (!currentTargetInput || !transcript.trim()) {
        return;
    }
    
    let processedText = transcript.trim();
    
    // ุชุทุจูู ุงููุนุงูุฌุงุช
    if (currentVoiceSettings.autoCapitalize) {
        processedText = capitalizeFirst(processedText);
    }
    
    if (currentVoiceSettings.autoCorrect) {
        processedText = applyAutoCorrect(processedText);
    }
    
    if (currentVoiceSettings.enablePunctuation) {
        processedText = addPunctuation(processedText);
    }
    
    // ูุนุงูุฌุฉ ุฎุงุตุฉ ุญุณุจ ููุน ุงูุญูู
    processedText = processFieldSpecificInput(currentTargetInput, processedText);
    
    // ุฅุฏุฑุงุฌ ุงููุต
    if (currentVoiceSettings.confirmBeforeInput) {
        showConfirmationDialog(processedText)
            .then(confirmed => {
                if (confirmed) {
                    insertTextToField(currentTargetInput, processedText);
                }
            });
    } else {
        insertTextToField(currentTargetInput, processedText);
    }
}

function insertTextToField(field, text) {
    // ุฅุฏุฑุงุฌ ุงููุต ูู ุงูุญูู
    if (field.tagName.toLowerCase() === 'select') {
        // ููููุงุฆู ุงูููุณุฏูุฉุ ุงูุจุญุซ ุนู ุงูุฎูุงุฑ ุงูููุงุณุจ
        selectBestOption(field, text);
    } else {
        // ููุญููู ุงููุตูุฉ
        field.value = text;
        field.focus();
        
        // ุฅุทูุงู ุฃุญุฏุงุซ ุงูุชุบููุฑ
        field.dispatchEvent(new Event('input', { bubbles: true }));
        field.dispatchEvent(new Event('change', { bubbles: true }));
    }
    
    playVoiceSound('success');
    showVoiceToast(`ุชู ุฅุฏุฎุงู: "${text}"`, 'success');
    
    if (currentVoiceSettings.enableVibration && navigator.vibrate) {
        navigator.vibrate([100, 50, 100]);
    }
}

// ==============================
// ูุนุงูุฌุงุช ุงููุตูุต
// ==============================
function capitalizeFirst(text) {
    return text.charAt(0).toUpperCase() + text.slice(1);
}

function applyAutoCorrect(text) {
    // ูุงููุณ ุงูุชุตุญูุญุงุช ุงูุดุงุฆุนุฉ
    const corrections = {
        'ูุงุญุฏ': '1',
        'ุงุซูุงู': '2',
        'ุซูุงุซุฉ': '3',
        'ุฃุฑุจุนุฉ': '4',
        'ุฎูุณุฉ': '5',
        'ุณุชุฉ': '6',
        'ุณุจุนุฉ': '7',
        'ุซูุงููุฉ': '8',
        'ุชุณุนุฉ': '9',
        'ุนุดุฑุฉ': '10',
        'ุตูุฑ': '0',
        'ูุนู': 'ูุนู',
        'ูุง': 'ูุง',
        'ุฐูุฑ': 'ุฐูุฑ',
        'ุฃูุซู': 'ุฃูุซู',
        'ูุชุฒูุฌ': 'ูุชุฒูุฌ/ุฉ',
        'ุนุงุฒุจ': 'ุฃุนุฒุจ/ุนุฒุจุงุก',
        'ุฃุฑูู': 'ุฃุฑูู/ุฉ',
        'ูุทูู': 'ูุทูู/ุฉ'
    };
    
    let correctedText = text;
    
    Object.keys(corrections).forEach(word => {
        const regex = new RegExp('\\b' + word + '\\b', 'gi');
        correctedText = correctedText.replace(regex, corrections[word]);
    });
    
    return correctedText;
}

function addPunctuation(text) {
    // ุฅุถุงูุฉ ุนูุงูุงุช ุงูุชุฑููู ุงูุชููุงุฆูุฉ
    let punctuatedText = text;
    
    // ุงุณุชุจุฏุงู ุงููููุงุช ุจุนูุงูุงุช ุงูุชุฑููู
    const punctuationMap = {
        'ููุทุฉ': '.',
        'ูุงุตูุฉ': ',',
        'ุนูุงูุฉ ุงุณุชููุงู': 'ุ',
        'ุนูุงูุฉ ุชุนุฌุจ': '!',
        'ููุทุชุงู': ':',
        'ูุงุตูุฉ ููููุทุฉ': ';',
        'ููุณ ููุชูุญ': '(',
        'ููุณ ูููู': ')',
        'ุฎุท': '-',
        'ุดุฑุทุฉ': '_'
    };
    
    Object.keys(punctuationMap).forEach(word => {
        const regex = new RegExp('\\b' + word + '\\b', 'gi');
        punctuatedText = punctuatedText.replace(regex, punctuationMap[word]);
    });
    
    return punctuatedText;
}

function processFieldSpecificInput(field, text) {
    const fieldType = field.type ? field.type.toLowerCase() : 'text';
    const fieldId = field.id ? field.id.toLowerCase() : '';
    
    // ูุนุงูุฌุฉ ุฎุงุตุฉ ุจุงูุฃุฑูุงู
    if (fieldType === 'number' || fieldType === 'tel') {
        return extractNumbers(text);
    }
    
    // ูุนุงูุฌุฉ ุฎุงุตุฉ ุจุงูุชูุงุฑูุฎ
    if (fieldType === 'date' || fieldId.includes('date') || fieldId.includes('ุชุงุฑูุฎ')) {
        return convertDateFromSpeech(text);
    }
    
    // ูุนุงูุฌุฉ ุงูุจุฑูุฏ ุงูุฅููุชุฑููู
    if (fieldType === 'email' || fieldId.includes('email') || fieldId.includes('ุจุฑูุฏ')) {
        return convertEmailFromSpeech(text);
    }
    
    // ูุนุงูุฌุฉ ุฃุฑูุงู ุงูููุงุชู
    if (fieldId.includes('phone') || fieldId.includes('ูุงุชู') || fieldId.includes('ุฌูุงู')) {
        return formatPhoneNumber(extractNumbers(text));
    }
    
    return text;
}

function extractNumbers(text) {
    // ุงุณุชุฎุฑุงุฌ ุงูุฃุฑูุงู ูู ุงููุต
    return text.replace(/[^\d]/g, '');
}

function convertDateFromSpeech(text) {
    // ุชุญููู ุงูุชุงุฑูุฎ ุงูููุทูู ุฅูู ุชูุณูู ุฑููู
    const today = new Date();
    
    if (text.includes('ุงูููู')) {
        return today.toISOString().split('T')[0];
    }
    
    if (text.includes('ุฃูุณ')) {
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        return yesterday.toISOString().split('T')[0];
    }
    
    if (text.includes('ุบุฏุงู') || text.includes('ุบุฏุง')) {
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        return tomorrow.toISOString().split('T')[0];
    }
    
    // ุงุณุชุฎุฑุงุฌ ุฃุฑูุงู ุงูุชุงุฑูุฎ
    const numbers = text.match(/\d+/g);
    if (numbers && numbers.length >= 3) {
        const day = numbers[0].padStart(2, '0');
        const month = numbers[1].padStart(2, '0');
        const year = numbers[2].length === 2 ? '20' + numbers[2] : numbers[2];
        return `${year}-${month}-${day}`;
    }
    
    return text;
}

function convertEmailFromSpeech(text) {
    // ุชุญููู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุงูููุทูู
    let email = text.toLowerCase()
        .replace(/\s+/g, '')
        .replace('ููุทุฉ', '.')
        .replace('ุฏูุช', '.')
        .replace('ุฃุช', '@')
        .replace('ุงุช', '@')
        .replace('ูู', '@');
    
    return email;
}

function formatPhoneNumber(numbers) {
    // ุชูุณูู ุฑูู ุงููุงุชู
    if (numbers.length === 11 && numbers.startsWith('07')) {
        return numbers;
    }
    
    if (numbers.length === 10 && numbers.startsWith('7')) {
        return '0' + numbers;
    }
    
    return numbers;
}

// ==============================
// ุฅุฏุงุฑุฉ ุงูููุงุฆู ุงูููุณุฏูุฉ
// ==============================
function selectBestOption(selectField, spokenText) {
    const options = Array.from(selectField.options);
    const lowerSpokenText = spokenText.toLowerCase();
    
    // ุงูุจุญุซ ุนู ุชุทุงุจู ูุจุงุดุฑ
    let bestMatch = options.find(option => 
        option.text.toLowerCase().includes(lowerSpokenText) ||
        option.value.toLowerCase().includes(lowerSpokenText)
    );
    
    // ุฅุฐุง ูู ูุฌุฏ ุชุทุงุจูุ ุงุจุญุซ ุนู ุฃูุถู ุชุทุงุจู ุฌุฒุฆู
    if (!bestMatch) {
        bestMatch = options.find(option => {
            const optionWords = option.text.toLowerCase().split(' ');
            const spokenWords = lowerSpokenText.split(' ');
            
            return spokenWords.some(spokenWord => 
                optionWords.some(optionWord => 
                    optionWord.includes(spokenWord) || spokenWord.includes(optionWord)
                )
            );
        });
    }
    
    if (bestMatch) {
        selectField.value = bestMatch.value;
        selectField.dispatchEvent(new Event('change', { bubbles: true }));
        showVoiceToast(`ุชู ุงุฎุชูุงุฑ: "${bestMatch.text}"`, 'success');
    } else {
        showVoiceToast('ูู ูุชู ุงูุนุซูุฑ ุนูู ุฎูุงุฑ ููุงุณุจ', 'warning');
    }
}

// ==============================
// ุชุญุฏูุซ ุญุงูุฉ ุฃุฒุฑุงุฑ ุงููุงููุฑูููู
// ==============================
function updateMicButtonState(inputField, state) {
    const micButton = micButtons.get(inputField);
    if (!micButton) return;
    
    // ุฅุฒุงูุฉ ุฌููุน ุญุงูุงุช ุงูุฃุฒุฑุงุฑ
    micButton.classList.remove('listening', 'processing', 'success', 'error');
    
    // ุฅุถุงูุฉ ุงูุญุงูุฉ ุงูุฌุฏูุฏุฉ
    if (state !== 'idle') {
        micButton.classList.add(state);
    }
    
    // ุชุญุฏูุซ ุงูุชูููุญ
    const tooltips = {
        idle: 'ุฅุฏุฎุงู ุจุงูุตูุช',
        listening: 'ุฌุงุฑู ุงูุงุณุชูุงุน... ุงุถุบุท ููุฅููุงู',
        processing: 'ุฌุงุฑู ุงููุนุงูุฌุฉ...',
        success: 'ุชู ุจูุฌุงุญ',
        error: 'ุญุฏุซ ุฎุทุฃ'
    };
    
    micButton.title = tooltips[state] || tooltips.idle;
}

// ==============================
// ุนุฑุถ ุงููุชุงุฆุฌ ุงููุคูุชุฉ
// ==============================
function showInterimResult(text) {
    let interimDisplay = document.getElementById('voice-interim-result');
    
    if (!interimDisplay) {
        interimDisplay = document.createElement('div');
        interimDisplay.id = 'voice-interim-result';
        interimDisplay.className = 'voice-interim-display';
        document.body.appendChild(interimDisplay);
    }
    
    interimDisplay.textContent = text;
    interimDisplay.style.display = 'block';
    
    // ุชุญุฏูุฏ ูููุน ุงูุนุฑุถ ุจุงููุฑุจ ูู ุงูุญูู ุงููุดุท
    if (currentTargetInput) {
        const rect = currentTargetInput.getBoundingClientRect();
        interimDisplay.style.top = (rect.bottom + window.scrollY + 5) + 'px';
        interimDisplay.style.left = (rect.left + window.scrollX) + 'px';
    }
}

function hideInterimResult() {
    const interimDisplay = document.getElementById('voice-interim-result');
    if (interimDisplay) {
        interimDisplay.style.display = 'none';
    }
}

// ==============================
// ููุญุฉ ุงูุชุญูู ูู ุงูุฅุนุฏุงุฏุงุช ุงูุตูุชูุฉ
// ==============================
function createVoiceControlPanel() {
    const panel = document.createElement('div');
    panel.id = 'voice-control-panel';
    panel.innerHTML = `
        <div class="voice-control-overlay">
            <div class="voice-control-container">
                <div class="voice-control-header">
                    <h3>๐ค ุฅุนุฏุงุฏุงุช ุงูุฅุฏุฎุงู ุงูุตูุชู</h3>
                    <button class="close-voice-btn" onclick="closeVoiceControlPanel()">โ</button>
                </div>
                
                <div class="voice-control-body">
                    <div class="voice-control-tabs">
                        <button class="voice-tab-btn active" onclick="showVoiceTab('language')">ุงููุบุฉ</button>
                        <button class="voice-tab-btn" onclick="showVoiceTab('appearance')">ุงููุธูุฑ</button>
                        <button class="voice-tab-btn" onclick="showVoiceTab('behavior')">ุงูุณููู</button>
                        <button class="voice-tab-btn" onclick="showVoiceTab('advanced')">ูุชูุฏู</button>
                    </div>
                    
                    <div class="voice-control-content">
                        <!-- ุชุจููุจ ุงููุบุฉ -->
                        <div class="voice-tab-content active" id="language-tab">
                            <div class="voice-control-section">
                                <h4>๐ ุฅุนุฏุงุฏุงุช ุงููุบุฉ</h4>
                                <div class="voice-control-row">
                                    <label>ุงููุบุฉ ุงูุฃุณุงุณูุฉ:</label>
                                    <select id="voiceLanguage">
                                        ${currentVoiceSettings.supportedLanguages.map(lang => 
                                            `<option value="${lang.code}" ${lang.code === currentVoiceSettings.language ? 'selected' : ''}>
                                                ${lang.flag} ${lang.name}
                                            </option>`
                                        ).join('')}
                                    </select>
                                </div>
                                <div class="voice-control-row">
                                    <label>ุงููุชุงุจุฉ ุงูุชููุงุฆูุฉ:</label>
                                    <input type="checkbox" id="autoCapitalize" ${currentVoiceSettings.autoCapitalize ? 'checked' : ''}>
                                </div>
                                <div class="voice-control-row">
                                    <label>ุงูุชุตุญูุญ ุงูุชููุงุฆู:</label>
                                    <input type="checkbox" id="autoCorrect" ${currentVoiceSettings.autoCorrect ? 'checked' : ''}>
                                </div>
                                <div class="voice-control-row">
                                    <label>ุนูุงูุงุช ุงูุชุฑููู:</label>
                                    <input type="checkbox" id="enablePunctuation" ${currentVoiceSettings.enablePunctuation ? 'checked' : ''}>
                                </div>
                            </div>
                        </div>
                        
                        <!-- ุชุจููุจ ุงููุธูุฑ -->
                        <div class="voice-tab-content" id="appearance-tab">
                            <div class="voice-control-section">
                                <h4>๐จ ุฅุนุฏุงุฏุงุช ุงููุธูุฑ</h4>
                                <div class="voice-control-row">
                                    <label>ุฅุธูุงุฑ ุฃุฒุฑุงุฑ ุงููุงููุฑูููู:</label>
                                    <input type="checkbox" id="showMicButton" ${currentVoiceSettings.showMicButton ? 'checked' : ''}>
                                </div>
                                <div class="voice-control-row">
                                    <label>ุญุฌู ุงูุฃุฒุฑุงุฑ:</label>
                                    <select id="buttonSize">
                                        <option value="small" ${currentVoiceSettings.buttonSize === 'small' ? 'selected' : ''}>ุตุบูุฑ</option>
                                        <option value="normal" ${currentVoiceSettings.buttonSize === 'normal' ? 'selected' : ''}>ุนุงุฏู</option>
                                        <option value="large" ${currentVoiceSettings.buttonSize === 'large' ? 'selected' : ''}>ูุจูุฑ</option>
                                    </select>
                                </div>
                                <div class="voice-control-row">
                                    <label>ูููุน ุงูุฃุฒุฑุงุฑ:</label>
                                    <select id="buttonPosition">
                                        <option value="right" ${currentVoiceSettings.buttonPosition === 'right' ? 'selected' : ''}>ูููู</option>
                                        <option value="left" ${currentVoiceSettings.buttonPosition === 'left' ? 'selected' : ''}>ูุณุงุฑ</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- ุชุจููุจ ุงูุณููู -->
                        <div class="voice-tab-content" id="behavior-tab">
                            <div class="voice-control-section">
                                <h4>โ๏ธ ุฅุนุฏุงุฏุงุช ุงูุณููู</h4>
                                <div class="voice-control-row">
                                    <label>ุชุฃููุฏ ูุจู ุงูุฅุฏุฎุงู:</label>
                                    <input type="checkbox" id="confirmBeforeInput" ${currentVoiceSettings.confirmBeforeInput ? 'checked' : ''}>
                                </div>
                                <div class="voice-control-row">
                                    <label>ูููุฉ ุงูุชุณุฌูู (ุซุงููุฉ):</label>
                                    <input type="range" id="timeoutDuration" min="5" max="30" value="${currentVoiceSettings.timeoutDuration / 1000}">
                                    <span id="timeoutValue">${currentVoiceSettings.timeoutDuration / 1000}s</span>
                                </div>
                                <div class="voice-control-row">
                                    <label>ุชูุนูู ุงูุฃุตูุงุช:</label>
                                    <input type="checkbox" id="enableSounds" ${currentVoiceSettings.enableSounds ? 'checked' : ''}>
                                </div>
                                <div class="voice-control-row">
                                    <label>ุชูุนูู ุงูุงูุชุฒุงุฒ:</label>
                                    <input type="checkbox" id="enableVibration" ${currentVoiceSettings.enableVibration ? 'checked' : ''}>
                                </div>
                            </div>
                        </div>
                        
                        <!-- ุชุจููุจ ูุชูุฏู -->
                        <div class="voice-tab-content" id="advanced-tab">
                            <div class="voice-control-section">
                                <h4>๐ง ุฅุนุฏุงุฏุงุช ูุชูุฏูุฉ</h4>
                                <div class="voice-control-row">
                                    <label>ุงูุชุณุฌูู ุงููุณุชูุฑ:</label>
                                    <input type="checkbox" id="continuous" ${currentVoiceSettings.continuous ? 'checked' : ''}>
                                </div>
                                <div class="voice-control-row">
                                    <label>ุงููุชุงุฆุฌ ุงููุคูุชุฉ:</label>
                                    <input type="checkbox" id="interimResults" ${currentVoiceSettings.interimResults ? 'checked' : ''}>
                                </div>
                                <div class="voice-control-row">
                                    <label>ุนุฏุฏ ุงูุจุฏุงุฆู:</label>
                                    <input type="number" id="maxAlternatives" min="1" max="10" value="${currentVoiceSettings.maxAlternatives}">
                                </div>
                                <div class="voice-control-row">
                                    <label>ูุณุชูู ุงูุตูุช:</label>
                                    <input type="range" id="volume" min="0" max="1" step="0.1" value="${currentVoiceSettings.volume}">
                                    <span id="volumeValue">${Math.round(currentVoiceSettings.volume * 100)}%</span>
                                </div>
                            </div>
                            
                            <div class="voice-control-section">
                                <h4>๐งช ุงุฎุชุจุงุฑ ุงููุธุงู</h4>
                                <button class="voice-test-btn" onclick="testVoiceSystem()">๐ค ุงุฎุชุจุงุฑ ุงููุงููุฑูููู</button>
                                <button class="voice-test-btn" onclick="testVoiceSounds()">๐ ุงุฎุชุจุงุฑ ุงูุฃุตูุงุช</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="voice-control-footer">
                    <button class="voice-control-btn apply-btn" onclick="applyVoiceSettings()">โ ุชุทุจูู</button>
                    <button class="voice-control-btn save-btn" onclick="saveVoiceSettings()">๐พ ุญูุธ</button>
                    <button class="voice-control-btn reset-btn" onclick="resetVoiceSettings()">๐ ุฅุนุงุฏุฉ ุชุนููู</button>
                    <button class="voice-control-btn export-btn" onclick="exportVoiceSettings()">๐ค ุชุตุฏูุฑ</button>
                    <button class="voice-control-btn import-btn" onclick="importVoiceSettings()">๐ฅ ุงุณุชูุฑุงุฏ</button>
                </div>
            </div>
        </div>
    `;
    
    // ุฅุถุงูุฉ ุงูุฃููุงุท
    addVoiceStyles();
    
    document.body.appendChild(panel);
    voiceControlPanel = panel;
    
    // ุฅุนุฏุงุฏ ุงููุณุชูุนูู ููุฅุนุฏุงุฏุงุช
    setupVoiceSettingsListeners();
}

// ==============================
// ุฅุถุงูุฉ ุฃููุงุท CSS
// ==============================
function addVoiceStyles() {
    if (document.getElementById('voice-input-styles')) return;
    
    const styles = document.createElement('style');
    styles.id = 'voice-input-styles';
    styles.textContent = `
        /* ุฃููุงุท ุฃุฒุฑุงุฑ ุงููุงููุฑูููู */
        .voice-input-container {
            position: relative;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .voice-mic-button {
            background: linear-gradient(135deg, #3498db, #2980b9);
            border: none;
            border-radius: 50%;
            color: white;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(52, 152, 219, 0.3);
        }
        
        .voice-mic-button:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 15px rgba(52, 152, 219, 0.4);
        }
        
        .voice-mic-button.mic-small {
            width: 30px;
            height: 30px;
        }
        
        .voice-mic-button.mic-normal {
            width: 36px;
            height: 36px;
        }
        
        .voice-mic-button.mic-large {
            width: 42px;
            height: 42px;
        }
        
        .voice-mic-button svg {
            width: 60%;
            height: 60%;
        }
        
        .voice-mic-button.listening {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            animation: voicePulse 1s infinite;
        }
        
        .voice-mic-button.processing {
            background: linear-gradient(135deg, #f39c12, #e67e22);
        }
        
        .voice-mic-button.success {
            background: linear-gradient(135deg, #27ae60, #229954);
        }
        
        .voice-mic-button.error {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }
        
        @keyframes voicePulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.15); }
        }
        
        .mic-status {
            position: absolute;
            top: -5px;
            right: -5px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid white;
        }
        
        .voice-mic-button.listening .mic-status {
            background: #e74c3c;
            animation: voiceBlink 0.5s infinite;
        }
        
        @keyframes voiceBlink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }
        
        /* ุนุฑุถ ุงููุชุงุฆุฌ ุงููุคูุชุฉ */
        .voice-interim-display {
            position: absolute;
            background: rgba(52, 152, 219, 0.9);
            color: white;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 10000;
            max-width: 300px;
            word-wrap: break-word;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            display: none;
        }
        
        .voice-interim-display::before {
            content: '';
            position: absolute;
            top: -5px;
            left: 20px;
            width: 0;
            height: 0;
            border-left: 5px solid transparent;
            border-right: 5px solid transparent;
            border-bottom: 5px solid rgba(52, 152, 219, 0.9);
        }
        
        /* ููุญุฉ ุงูุชุญูู */
        .voice-control-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.8);
            z-index: 10000;
            display: none;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .voice-control-overlay.show {
            display: flex;
        }
        
        .voice-control-container {
            background: white;
            border-radius: 15px;
            width: 100%;
            max-width: 700px;
            max-height: 90vh;
            overflow: hidden;
            box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
        }
        
        .voice-control-header {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .voice-control-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }
        
        .close-voice-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.3s;
        }
        
        .close-voice-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }
        
        .voice-control-body {
            flex: 1;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        
        .voice-control-tabs {
            display: flex;
            border-bottom: 1px solid #e3e6f0;
            background: #f8f9fa;
        }
        
        .voice-tab-btn {
            background: none;
            border: none;
            padding: 15px 20px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #6c757d;
            transition: all 0.3s;
            border-bottom: 3px solid transparent;
            flex: 1;
            text-align: center;
        }
        
        .voice-tab-btn:hover {
            background: #e9ecef;
            color: #495057;
        }
        
        .voice-tab-btn.active {
            color: #3498db;
            border-bottom-color: #3498db;
            background: white;
        }
        
        .voice-control-content {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
        }
        
        .voice-tab-content {
            display: none;
        }
        
        .voice-tab-content.active {
            display: block;
        }
        
        .voice-control-section {
            margin-bottom: 25px;
        }
        
        .voice-control-section h4 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 16px;
            font-weight: 600;
            padding-bottom: 8px;
            border-bottom: 2px solid #e3e6f0;
        }
        
        .voice-control-row {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
            gap: 15px;
        }
        
        .voice-control-row label {
            min-width: 150px;
            font-weight: 500;
            color: #495057;
            font-size: 14px;
        }
        
        .voice-control-row input,
        .voice-control-row select {
            flex: 1;
            padding: 8px 12px;
            border: 2px solid #e3e6f0;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        .voice-control-row input:focus,
        .voice-control-row select:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }
        
        .voice-control-row input[type="checkbox"] {
            width: auto;
            flex: none;
        }
        
        .voice-control-row input[type="range"] {
            flex: 1;
        }
        
        .voice-test-btn {
            background: #17a2b8;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            margin: 5px;
            transition: background 0.3s;
        }
        
        .voice-test-btn:hover {
            background: #138496;
        }
        
        .voice-control-footer {
            padding: 20px;
            background: #f8f9fa;
            border-top: 1px solid #e3e6f0;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .voice-control-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
            min-width: 120px;
            justify-content: center;
        }
        
        .apply-btn {
            background: #17a2b8;
            color: white;
        }
        
        .apply-btn:hover {
            background: #138496;
        }
        
        .save-btn {
            background: #28a745;
            color: white;
        }
        
        .save-btn:hover {
            background: #218838;
        }
        
        .reset-btn {
            background: #ffc107;
            color: #212529;
        }
        
        .reset-btn:hover {
            background: #e0a800;
        }
        
        .export-btn {
            background: #6f42c1;
            color: white;
        }
        
        .export-btn:hover {
            background: #5a359a;
        }
        
        .import-btn {
            background: #fd7e14;
            color: white;
        }
        
        .import-btn:hover {
            background: #dc6502;
        }
        
        /* ุชุญุณููุงุช ููููุงุชู */
        @media (max-width: 768px) {
            .voice-control-overlay {
                padding: 10px;
            }
            
            .voice-control-container {
                max-height: 95vh;
            }
            
            .voice-control-tabs {
                flex-wrap: wrap;
            }
            
            .voice-tab-btn {
                flex: none;
                min-width: 100px;
                padding: 10px 12px;
                font-size: 12px;
            }
            
            .voice-control-row {
                flex-direction: column;
                align-items: stretch;
                gap: 8px;
            }
            
            .voice-control-row label {
                min-width: auto;
                font-size: 13px;
            }
            
            .voice-control-footer {
                flex-direction: column;
            }
            
            .voice-control-btn {
                width: 100%;
                min-width: auto;
            }
            
            .voice-input-container {
                flex-wrap: wrap;
            }
            
            .voice-mic-button.mic-small {
                width: 28px;
                height: 28px;
            }
            
            .voice-mic-button.mic-normal {
                width: 32px;
                height: 32px;
            }
            
            .voice-mic-button.mic-large {
                width: 38px;
                height: 38px;
            }
        }
        
        /* ุฅุดุนุงุฑุงุช ุตูุชูุฉ */
        .voice-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #3498db;
            color: white;
            padding: 12px 16px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            z-index: 10001;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 300px;
            word-wrap: break-word;
        }
        
        .voice-toast.show {
            transform: translateX(0);
        }
        
        .voice-toast.success {
            background: #27ae60;
        }
        
        .voice-toast.error {
            background: #e74c3c;
        }
        
        .voice-toast.warning {
            background: #f39c12;
        }
        
        .voice-toast.info {
            background: #3498db;
        }
    `;
    
    document.head.appendChild(styles);
}

// ==============================
// ูุธุงุฆู ููุญุฉ ุงูุชุญูู
// ==============================
function showVoiceControlPanel() {
    if (!voiceControlPanel) {
        createVoiceControlPanel();
    }
    
    const overlay = voiceControlPanel.querySelector('.voice-control-overlay');
    overlay.classList.add('show');
    document.body.style.overflow = 'hidden';
}

function closeVoiceControlPanel() {
    if (voiceControlPanel) {
        const overlay = voiceControlPanel.querySelector('.voice-control-overlay');
        overlay.classList.remove('show');
        document.body.style.overflow = 'auto';
    }
}

function showVoiceTab(tabName) {
    // ุฅุฎูุงุก ุฌููุน ุงูุชุจููุจุงุช
    document.querySelectorAll('.voice-tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    document.querySelectorAll('.voice-tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // ุฅุธูุงุฑ ุงูุชุจููุจ ุงููุทููุจ
    document.getElementById(tabName + '-tab').classList.add('active');
    event.target.classList.add('active');
}

// ==============================
// ุฅุฏุงุฑุฉ ุงูุฅุนุฏุงุฏุงุช
// ==============================
function setupVoiceSettingsListeners() {
    // ูุณุชูุน ุชุบููุฑ ูููุฉ ุงูุชุณุฌูู
    const timeoutSlider = document.getElementById('timeoutDuration');
    const timeoutValue = document.getElementById('timeoutValue');
    
    if (timeoutSlider && timeoutValue) {
        timeoutSlider.addEventListener('input', function() {
            timeoutValue.textContent = this.value + 's';
        });
    }
    
    // ูุณุชูุน ุชุบููุฑ ูุณุชูู ุงูุตูุช
    const volumeSlider = document.getElementById('volume');
    const volumeValue = document.getElementById('volumeValue');
    
    if (volumeSlider && volumeValue) {
        volumeSlider.addEventListener('input', function() {
            volumeValue.textContent = Math.round(this.value * 100) + '%';
        });
    }
}

function applyVoiceSettings() {
    updateVoiceSettingsFromForm();
    
    // ุชุทุจูู ุฅุนุฏุงุฏุงุช ุงููุญุฑู
    if (recognition) {
        recognition.lang = currentVoiceSettings.language;
        recognition.continuous = currentVoiceSettings.continuous;
        recognition.interimResults = currentVoiceSettings.interimResults;
        recognition.maxAlternatives = currentVoiceSettings.maxAlternatives;
    }
    
    // ุชุญุฏูุซ ุฃุฒุฑุงุฑ ุงููุงููุฑูููู
    updateMicrophoneButtons();
    
    showVoiceToast('ุชู ุชุทุจูู ุงูุฅุนุฏุงุฏุงุช', 'success');
}

function saveVoiceSettings() {
    updateVoiceSettingsFromForm();
    
    try {
        localStorage.setItem('charity_voice_settings', JSON.stringify(currentVoiceSettings));
        applyVoiceSettings();
        showVoiceToast('ุชู ุญูุธ ุงูุฅุนุฏุงุฏุงุช ุจูุฌุงุญ', 'success');
    } catch (error) {
        console.error('ุฎุทุฃ ูู ุญูุธ ุฅุนุฏุงุฏุงุช ุงูุตูุช:', error);
        showVoiceToast('ูุดู ูู ุญูุธ ุงูุฅุนุฏุงุฏุงุช', 'error');
    }
}

function loadVoiceSettings() {
    try {
        const savedSettings = localStorage.getItem('charity_voice_settings');
        if (savedSettings) {
            const parsedSettings = JSON.parse(savedSettings);
            currentVoiceSettings = { ...DEFAULT_VOICE_SETTINGS, ...parsedSettings };
            console.log('ุชู ุชุญููู ุฅุนุฏุงุฏุงุช ุงูุตูุช ุงููุญููุธุฉ');
        }
    } catch (error) {
        console.error('ุฎุทุฃ ูู ุชุญููู ุฅุนุฏุงุฏุงุช ุงูุตูุช:', error);
        currentVoiceSettings = { ...DEFAULT_VOICE_SETTINGS };
    }
}

function resetVoiceSettings() {
    if (confirm('ูู ุฃูุช ูุชุฃูุฏ ูู ุฅุนุงุฏุฉ ุชุนููู ุฌููุน ุฅุนุฏุงุฏุงุช ุงูุตูุชุ')) {
        currentVoiceSettings = { ...DEFAULT_VOICE_SETTINGS };
        setVoiceSettingsToForm();
        applyVoiceSettings();
        showVoiceToast('ุชู ุฅุนุงุฏุฉ ุชุนููู ุงูุฅุนุฏุงุฏุงุช', 'info');
    }
}

function updateVoiceSettingsFromForm() {
    const formElements = document.querySelectorAll('#voice-control-panel input, #voice-control-panel select');
    
    formElements.forEach(element => {
        if (element.id && currentVoiceSettings.hasOwnProperty(element.id)) {
            if (element.type === 'checkbox') {
                currentVoiceSettings[element.id] = element.checked;
            } else if (element.type === 'range' && element.id === 'timeoutDuration') {
                currentVoiceSettings[element.id] = parseInt(element.value) * 1000;
            } else if (element.type === 'range' && element.id === 'volume') {
                currentVoiceSettings[element.id] = parseFloat(element.value);
            } else {
                currentVoiceSettings[element.id] = element.value;
            }
        }
    });
}

function setVoiceSettingsToForm() {
    Object.keys(currentVoiceSettings).forEach(key => {
        const element = document.getElementById(key);
        if (element) {
            if (element.type === 'checkbox') {
                element.checked = currentVoiceSettings[key];
            } else if (element.type === 'range' && key === 'timeoutDuration') {
                element.value = currentVoiceSettings[key] / 1000;
            } else {
                element.value = currentVoiceSettings[key];
            }
        }
    });
}

// ==============================
// ุงุฎุชุจุงุฑ ุงููุธุงู
// ==============================
function testVoiceSystem() {
    if (!recognition) {
        showVoiceToast('ุงููุญุฑู ุบูุฑ ูุชุงุญ ููุงุฎุชุจุงุฑ', 'error');
        return;
    }
    
    showVoiceToast('ูู ุดูุฆุงู ูุงุฎุชุจุงุฑ ุงููุธุงู...', 'info');
    
    // ุฅูุดุงุก ุญูู ุงุฎุชุจุงุฑ ูุคูุช
    const testInput = document.createElement('input');
    testInput.type = 'text';
    testInput.placeholder = 'ูุชูุฌุฉ ุงูุงุฎุชุจุงุฑ ุณุชุธูุฑ ููุง';
    testInput.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 10002;
        padding: 15px;
        font-size: 16px;
        border: 2px solid #3498db;
        border-radius: 8px;
        width: 300px;
        text-align: center;
        background: white;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    `;
    
    document.body.appendChild(testInput);
    
    // ุจุฏุก ุงูุชุณุฌูู
    currentTargetInput = testInput;
    recognition.start();
    
    // ุฅุฒุงูุฉ ุงูุญูู ุจุนุฏ 15 ุซุงููุฉ
    setTimeout(() => {
        if (document.body.contains(testInput)) {
            document.body.removeChild(testInput);
        }
        currentTargetInput = null;
    }, 15000);
}

function testVoiceSounds() {
    showVoiceToast('ุงุฎุชุจุงุฑ ุงูุฃุตูุงุช...', 'info');
    
    setTimeout(() => playVoiceSound('start'), 500);
    setTimeout(() => playVoiceSound('success'), 1500);
    setTimeout(() => playVoiceSound('error'), 2500);
    setTimeout(() => playVoiceSound('end'), 3500);
}

// ==============================
// ุชุตุฏูุฑ ูุงุณุชูุฑุงุฏ ุงูุฅุนุฏุงุฏุงุช
// ==============================
function exportVoiceSettings() {
    updateVoiceSettingsFromForm();
    
    const exportData = {
        voiceSettings: currentVoiceSettings,
        exportDate: new Date().toISOString(),
        version: '1.0.0'
    };
    
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `voice_settings_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    showVoiceToast('ุชู ุชุตุฏูุฑ ุฅุนุฏุงุฏุงุช ุงูุตูุช', 'success');
}

function importVoiceSettings() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    
    input.onchange = function(e) {
        const file = e.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const importData = JSON.parse(e.target.result);
                
                if (importData.voiceSettings) {
                    currentVoiceSettings = { ...DEFAULT_VOICE_SETTINGS, ...importData.voiceSettings };
                    setVoiceSettingsToForm();
                    applyVoiceSettings();
                    showVoiceToast('ุชู ุงุณุชูุฑุงุฏ ุฅุนุฏุงุฏุงุช ุงูุตูุช', 'success');
                } else {
                    showVoiceToast('ุชูุณูู ุงูููู ุบูุฑ ุตุญูุญ', 'error');
                }
            } catch (error) {
                console.error('ุฎุทุฃ ูู ุงุณุชูุฑุงุฏ ุงูุฅุนุฏุงุฏุงุช:', error);
                showVoiceToast('ุฎุทุฃ ูู ูุฑุงุกุฉ ููู ุงูุฅุนุฏุงุฏุงุช', 'error');
            }
        };
        
        reader.readAsText(file);
    };
    
    input.click();
}

// ==============================
// ูุธุงุฆู ูุณุงุนุฏุฉ
// ==============================
function updateMicrophoneButtons() {
    // ุฅุนุงุฏุฉ ุฅูุดุงุก ุงูุฃุฒุฑุงุฑ ูุน ุงูุฅุนุฏุงุฏุงุช ุงูุฌุฏูุฏุฉ
    micButtons.forEach((button, input) => {
        button.remove();
    });
    
    micButtons.clear();
    
    if (currentVoiceSettings.showMicButton) {
        addMicrophoneButtons();
    }
}

function observeNewInputFields() {
    // ูุฑุงูุจุฉ ุฅุถุงูุฉ ุญููู ุฌุฏูุฏุฉ
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            mutation.addedNodes.forEach(function(node) {
                if (node.nodeType === 1) { // ุนูุตุฑ HTML
                    // ุงูุจุญุซ ุนู ุญููู ุงูุฅุฏุฎุงู ุงูุฌุฏูุฏุฉ
                    const newInputs = node.querySelectorAll ? 
                        node.querySelectorAll('input[type="text"], input[type="number"], input[type="tel"], input[type="email"], textarea, select') : 
                        [];
                    
                    newInputs.forEach(addMicButtonToField);
                    
                    // ุฅุฐุง ูุงู ุงูุนูุตุฑ ููุณู ุญูู ุฅุฏุฎุงู
                    if (node.matches && node.matches('input[type="text"], input[type="number"], input[type="tel"], input[type="email"], textarea, select')) {
                        addMicButtonToField(node);
                    }
                }
            });
        });
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
}

function playVoiceSound(soundType) {
    if (!currentVoiceSettings.enableSounds) return;
    
    try {
        // ุฅูุดุงุก ูุบูุฉ ุจุณูุทุฉ
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        // ุชุญุฏูุฏ ุงูุชุฑุฏุฏ ุญุณุจ ููุน ุงูุตูุช
        const frequencies = {
            start: 800,
            success: 1000,
            error: 400,
            end: 600
        };
        
        oscillator.frequency.setValueAtTime(frequencies[soundType] || 600, audioContext.currentTime);
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(currentVoiceSettings.volume * 0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.3);
        
    } catch (error) {
        console.log('ูุง ูููู ุชุดุบูู ุงูุตูุช:', error);
    }
}

function showVoiceToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `voice-toast ${type}`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    // ุฅุธูุงุฑ ุงูุฅุดุนุงุฑ
    setTimeout(() => {
        toast.classList.add('show');
    }, 100);
    
    // ุฅุฎูุงุก ุงูุฅุดุนุงุฑ ุจุนุฏ 3 ุซูุงู
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
            if (document.body.contains(toast)) {
                document.body.removeChild(toast);
            }
        }, 300);
    }, 3000);
}

function showConfirmationDialog(text) {
    return new Promise((resolve) => {
        const confirmed = confirm(`ูู ุชุฑูุฏ ุฅุฏุฎุงู ุงููุต ุงูุชุงููุ\n\n"${text}"`);
        resolve(confirmed);
    });
}

// ==============================
// ุฅุนุฏุงุฏ ูุณุชูุนู ุงูุฃุญุฏุงุซ
// ==============================
function setupVoiceEventListeners() {
    // ูุณุชูุน ุชุบููุฑ ุงููุณู ูุฅุถุงูุฉ ุฃุฒุฑุงุฑ ุฌุฏูุฏุฉ
    document.addEventListener('click', function(e) {
        // ุชุฃุฎูุฑ ูุตูุฑ ููุณูุงุญ ููุนูุงุตุฑ ุงูุฌุฏูุฏุฉ ุจุงูุธููุฑ
        setTimeout(() => {
            const newInputs = document.querySelectorAll('input[type="text"], input[type="number"], input[type="tel"], input[type="email"], textarea, select');
            newInputs.forEach(input => {
                if (!micButtons.has(input)) {
                    addMicButtonToField(input);
                }
            });
        }, 500);
    });
    
    // ูุณุชูุน ุงุฎุชุตุงุฑุงุช ููุญุฉ ุงูููุงุชูุญ
    document.addEventListener('keydown', function(e) {
        // Ctrl + Shift + V ููุชุญ ููุญุฉ ุงูุชุญูู
        if (e.ctrlKey && e.shiftKey && e.key === 'V') {
            e.preventDefault();
            showVoiceControlPanel();
        }
        
        // Escape ูุฅููุงู ุงูุชุณุฌูู
        if (e.key === 'Escape' && isListening) {
            e.preventDefault();
            stopListening();
        }
    });
}

// ==============================
// ุชููุฆุฉ ุงููุธุงู ุนูุฏ ุชุญููู ุงูุตูุญุฉ
// ==============================
document.addEventListener('DOMContentLoaded', function() {
    // ุชุฃุฎูุฑ ุงูุชููุฆุฉ ููุชุฃูุฏ ูู ุชุญููู ุงูููู ุงูุฑุฆูุณู
    setTimeout(() => {
        initializeVoiceSystem();
    }, 1500);
});

// ==============================
// ุฅุชุงุญุฉ ุงููุธุงุฆู ุนุงูููุงู
// ==============================
window.voiceInputSystem = {
    show: showVoiceControlPanel,
    hide: closeVoiceControlPanel,
    test: testVoiceSystem,
    start: (inputElement) => {
        if (inputElement) {
            const micButton = micButtons.get(inputElement);
            if (micButton) {
                handleMicButtonClick(inputElement, micButton);
            }
        }
    },
    stop: stopListening,
    settings: currentVoiceSettings,
    isListening: () => isListening
};

// ==============================
// ูุนุงูุฌ ุงูุฃุฎุทุงุก
// ==============================
window.addEventListener('error', function(e) {
    if (e.filename && e.filename.includes('voice-input')) {
        console.error('ุฎุทุฃ ูู ูุธุงู ุงูุฅุฏุฎุงู ุงูุตูุชู:', e.error);
    }
});

console.log('๐ค ุชู ุชุญููู ูุธุงู ุงูุฅุฏุฎุงู ุงูุตูุชู ุจูุฌุงุญ!');
console.log('๐ก ุงุณุชุฎุฏู Ctrl+Shift+V ููุชุญ ููุญุฉ ุงูุชุญูู');
console.log('๐ ุงุณุชุฎุฏู voiceInputSystem ููุชุญูู ุงูุจุฑูุฌู');
